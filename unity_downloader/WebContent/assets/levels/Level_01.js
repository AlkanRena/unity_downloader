
// -- user code here --

var places = [
		{"x" : 336, "y" : 272},
		{"x" : 320, "y" : 272},
		{"x" : 320, "y" : 208},
		{"x" : 336, "y" : 208},
		{"x" : 512, "y" : 272},
		{"x" : 496, "y" : 272},
		{"x" : 496, "y" : 208},
		{"x" : 512, "y" : 208},
		{"x" : 336, "y" : 400},
		{"x" : 320, "y" : 400},
		{"x" : 320, "y" : 336},
		{"x" : 336, "y" : 336},
		{"x" : 512, "y" : 400},
		{"x" : 496, "y" : 400},
		{"x" : 496, "y" : 336},
		{"x" : 512, "y" : 336}
	];
var position;

var random_number
/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * Level_01.
 */
function Level_01() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level_01_proto = Object.create(Phaser.State.prototype);
Level_01.prototype = Level_01_proto;
Level_01.prototype.constructor = Level_01;

Level_01.prototype.init = function () {
	
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	
};

Level_01.prototype.preload = function () {
	
	this.load.pack('level', 'assets/pack.json');
	this.load.image('lvl_choice', 'assets/menu/choice_menu.png')
	
};

Level_01.prototype.create = function () {
	var _floor = this.add.tileSprite(224, 160, 800, 600, 'floor', 3);
	_floor.scale.setTo(0.5, 0.5);
	
	this.add.sprite(336, 272, 'krzeslo', 0);
	
	this.add.sprite(320, 272, 'krzeslo', 0);
	
	this.add.sprite(320, 208, 'krzeslo2_17x28', 0);
	
	this.add.sprite(336, 208, 'krzeslo2_17x28', 0);
	
	this.add.sprite(304, 224, 'stol', 0);
	
	this.add.sprite(512, 272, 'krzeslo', 0);
	
	this.add.sprite(496, 272, 'krzeslo', 0);
	
	this.add.sprite(496, 208, 'krzeslo2_17x28', 0);
	
	this.add.sprite(512, 208, 'krzeslo2_17x28', 0);
	
	this.add.sprite(480, 224, 'stol', 0);
	
	this.add.sprite(336, 400, 'krzeslo', 0);
	
	this.add.sprite(320, 400, 'krzeslo', 0);
	
	this.add.sprite(320, 336, 'krzeslo2_17x28', 0);
	
	this.add.sprite(336, 336, 'krzeslo2_17x28', 0);
	
	this.add.sprite(304, 352, 'stol', 0);
	
	this.add.sprite(512, 400, 'krzeslo', 0);
	
	this.add.sprite(496, 400, 'krzeslo', 0);
	
	this.add.sprite(496, 336, 'krzeslo2_17x28', 0);
	
	this.add.sprite(512, 336, 'krzeslo2_17x28', 0);
	
	this.add.sprite(480, 352, 'stol', 0);
	
	
	this.time.events.repeat(Phaser.Timer.SECOND * 10, 6, this.add_random_people, this);
	
	 /*
    Code for the pause menu
*/
var w = 800, h=600;
// Create a label to use as a button
pause_label = game.add.text(w - 100, 20, 'Pause', { font: '24px Arial', fill: '#fff' });
pause_label.inputEnabled = true;
pause_label.events.onInputUp.add(function () {
    // When the paus button is pressed, we pause the game
    game.paused = true;

    // Then add the menu
    lvl_choice = game.add.sprite(w/2, h/2, 'lvl_choice');
    lvl_choice.anchor.setTo(0.5, 0.5);

    // And a label to illustrate which menu item was chosen. (This is not necessary)
    choiseLabel = game.add.text(w/2, h-150, 'Click outside menu to continue', { font: '30px Arial', fill: '#fff' });
    choiseLabel.anchor.setTo(0.5, 0.5);
});

// Add a input listener that can help us return from being paused
game.input.onDown.add(unpause, self);

// And finally the method that handels the pause menu
function unpause(event){
    // Only act if paused
    if(game.paused){
        // Calculate the corners of the menu
        var x1 = w/2 - 150/2, x2 = w/2 + 150/2,
            y1 = h/2 - 50/2, y2 = h/2 + 50/2;

        // Check if the click was inside the menu
        if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){
            // The choicemap is an array that will help us see which item was clicked
            var choisemap = ['one', 'two', 'three'];

            // Get menu local coordinates for the click
            var x = event.x - x1,
                y = event.y - y1;

            // Calculate the choice 
            var choise = Math.floor(x / 50) + 3*Math.floor(y / 50);

            // Display the choice
            choiseLabel.text = 'You chose menu item: ' + choisemap[choise];
            console.log(choise);
            
            if(choise == 0){
            	game.state.start('Level_00');
            	lvl_choice.destroy();
                choiseLabel.destroy();
                game.paused = false;
            } else if (choise == 1){
            	game.state.start('Level_01');
            	lvl_choice.destroy();
                choiseLabel.destroy();
                game.paused = false;
            } else {
            	game.state.start('Level_02');
            	lvl_choice.destroy();
                choiseLabel.destroy();
                game.paused = false;
            }
        }
        else{
            // Remove the menu and the label
        	lvl_choice.destroy();
            choiseLabel.destroy();

            // Unpause the game
            game.paused = false;
        }
    }
}
	
};

/* --- end generated code --- */
// -- user code here --

Level_01.prototype.update = function () {
		
};

Level_01.prototype.add_random_people = function add_random_people() {

	position = Math.floor(Math.random()*places.length);
	random_number = Math.floor(Math.random()*5);
	console.log(random_number)
	if (typeof places[0] !== 'undefined') {
		var place = places[position];
		place.x = place.x - 12;
		place.y = place.y - 16;
		switch (random_number) {
    case 0:
        this.add_ninja_f(place.x, place.y);
        break;
    case 1:
        this.add_ninja_m(place.x, place.y);
        break;
    case 2:
        this.add_warrior_m(place.x, place.y);
        break;
    case 3:
        this.add_warrior_f(place.x, place.y);
        break;
    case 4:
        this.add_ranger_f(place.x, place.y);
        break;
    case 5:
        this.add_ranger_m(place.x, place.y);
	}
		
		places.splice(position, 1)
	} else {
		console.log("added random")
	}
	
	

};


Level_01.prototype.add_ninja_f = function add_ninja_f(x, y) {
	var _ninja_f = this.add.sprite(x, y, 'ninja_f', 10);
	_ninja_f.animations.add('walk_right', [3, 4, 5], 4, true);
	_ninja_f.animations.add('walk_left', [9, 10, 11], 4, true);
	_ninja_f.animations.add('walk_up', [0, 1, 2], 4, true);
	_ninja_f.animations.add('walk_down', [6, 7, 8], 4, true);
	this.fninja_f = _ninja_f;
};

Level_01.prototype.add_ninja_m = function add_ninja_m(x, y) {
	var _ninja_m = this.add.sprite(x, y, 'ninja_m', 10);
	_ninja_m.animations.add('walk_right', [3, 4, 5], 4, true);
	_ninja_m.animations.add('walk_left', [9, 10, 11], 4, true);
	_ninja_m.animations.add('walk_up', [0, 1, 2], 4, true);
	_ninja_m.animations.add('walk_down', [6, 7, 8], 4, true);
	this.fninja_m = _ninja_m;
};

Level_01.prototype.add_warrior_f = function add_warrior_f(x, y) {
	var _warrior_f = this.add.sprite(x, y, 'warrior_f', 10);
	_warrior_f.animations.add('walk_right', [3, 4, 5], 4, true);
	_warrior_f.animations.add('walk_left', [9, 10, 11], 4, true);
	_warrior_f.animations.add('walk_up', [0, 1, 2], 4, true);
	_warrior_f.animations.add('walk_down', [6, 7, 8], 4, true);
	this.fwarrior_f = _warrior_f;
};

Level_01.prototype.add_warrior_m = function add_warrior_m(x, y) {
	var _warrior_m = this.add.sprite(x, y, 'warrior_m', 10);
	_warrior_m.animations.add('walk_right', [3, 4, 5], 4, true);
	_warrior_m.animations.add('walk_left', [9, 10, 11], 4, true);
	_warrior_m.animations.add('walk_up', [0, 1, 2], 4, true);
	_warrior_m.animations.add('walk_down', [6, 7, 8], 4, true);
	this.fwarrior_m = _warrior_m; 
};

Level_01.prototype.add_ranger_f = function add_ranger_f(x, y) {
	var _ranger_f = this.add.sprite(x, y, 'ranger_f', 10);
	_ranger_f.animations.add('walk_right', [3, 4, 5], 4, true);
	_ranger_f.animations.add('walk_left', [9, 10, 11], 4, true);
	_ranger_f.animations.add('walk_up', [0, 1, 2], 4, true);
	_ranger_f.animations.add('walk_down', [6, 7, 8], 4, true);
	this.franger_f = _ranger_f;
};

Level_01.prototype.add_ranger_m = function add_ranger_m(x, y) {
	var _ranger_m = this.add.sprite(x, y, 'ranger_m', 10);
	_ranger_m.animations.add('walk_right', [3, 4, 5], 4, true);
	_ranger_m.animations.add('walk_left', [9, 10, 11], 4, true);
	_ranger_m.animations.add('walk_up', [0, 1, 2], 4, true);
	_ranger_m.animations.add('walk_down', [6, 7, 8], 4, true);
	this.franger_m = _ranger_m;
};

